(* Standard priorities *)
     val P_HIGH = 100;
     val P_NORMAL = 1000;
     val P_LOW = 10000;
(* Standard declarations *)
     colset UNIT = unit;
     colset INT = int;
     colset BOOL = bool;
     colset STRING = string;
     colset STRINGLIST = list STRING;
     var u, u1, u2, u3: UNIT;
     var b, b1, b2, b3: BOOL;
     var i, j, k: INT;
     var s, s1, s2, s3: STRING;
     var ss, ss1, ss2: STRINGLIST;
colset BYTE = index Byte with 0x00..0xFF;
colset BIT= bool with (clear, set);
(* Parameters *)
     val fragSize = 20;
(* Constants *)
     val httpVersion = "HTTP/1.1";
     val nonce = "nonce";
     val uuid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
(* Functions *)
     fun B64 str =
     "B64("^str^")";
     fun SHA1 str =
     "SHA1("^str^")";
(* Interface declarations *)
     colset OPERATION = with
     CONNECT | TEXT | BINARY | 
     PING | PONG | CLOSE;
     colset CONN_RESULT= bool with
     (fail, success);
     colset MESSAGE = record
     Op: OPERATION *
     Message: STRING;
     colset MESSAGES = list MESSAGE;
     var msg: MESSAGE;
     var msgs, msgs2: MESSAGES;
     fun isData (msg:MESSAGE) =
     (#Op msg = TEXT) orelse
     (#Op msg = BINARY);
     colset EVENT = union
     Msg:MESSAGE +
     ConnRequest +
     ConnResult:CONN_RESULT;
     colset EVENTS = list EVENT;
     var es: EVENTS;
     colset CONN_STATUS = union
     CONN_OPEN + 
     CONN_CLOSING +
     CONN_CLOSED;
     colset CONN_REPLY = bool with
     (reject, accept);
     var conn_reply: CONN_REPLY;
     colset MSG_OR_CONN_REPLY = union
     Msg':MESSAGE +
     ConnReply:CONN_REPLY;
     colset MSGS_OR_CONN_REPLY 
     = list MSG_OR_CONN_REPLY;
     var mocrs: MSGS_OR_CONN_REPLY ;
(* URL declarations *)
     colset URL = record
       Protocol: STRING *
       Host: STRING *
       Port: INT *
       Path: STRING;
     var url: URL;
     fun split2 (s, t, i) =
       (* Recursively scan for character t in string s starting as position i, split
     if match *)
       let
         val ss = String.extract(s, i, NONE) 
       in 
         if String.isPrefix t ss then
           [substring(s, 0, i), 
           String.extract(s, i + String.size t, NONE)]
         else split2(s, t, i+1)
       end
     fun split (s, t) = 
       (* Split string s on character c *)
       if String.isPrefix t s then
         [String.extract(s, String.size t, NONE)]
       else if String.isSubstring t s then
         split2 (s, t, 1)
       else [s]
     fun parseUrl (s) = 
     let
       val proto'rest = split (s, "://")
       val proto'rest = 
         if length proto'rest = 1 
         then "ws" :: proto'rest 
         else proto'rest 
       val pro = List.hd(proto'rest)
     
       val host'path = split (List.nth(proto'rest, 1), "/")
       val pat = if length host'path = 2
         then "/" ^ List.nth(host'path, 1)
         else "/"
       
       val host'port = split (List.hd(host'path), ":")
       val hos = List.hd(host'port)
     
       val port'default = case pro of
         "wss" => 443
         | _ => 80
       val por = if length host'port = 1 
       then port'default
       else let
         val port'str = List.nth(host'port, 1)
         val port'int'opt = Int.fromString port'str
       in
         Option.getOpt(port'int'opt, port'default)
       end
     in
       {Protocol=pro, 
         Host=hos, 
         Port=por, 
         Path=pat}
     end;
(* WebSocket frame declarations *)
     colset MASK = list BYTE with 4..4;
     colset MASKING = union
     Nomask +
     Mask:MASK;
     fun randMask() = Mask([
         BYTE.ran(),
         BYTE.ran(),
         BYTE.ran(),
         BYTE.ran()
       ]);
     val opContinuation = 0x0;
     val opText = 0x1;
     val opBinary = 0x2
     val opConnectionClose = 0x8;
     val opPing = 0x9;
     val opPong = 0xA;
     colset WSFRAME = record
     Fin: BIT *
     Rsv1: BIT *
     Rsv2: BIT *
     Rsv3: BIT *
     Opcode: INT *
     Masked: BIT *
     Payload_length: INT *
     Masking_key: MASKING *
     Payload: STRING;
     colset WSFRAMES = list WSFRAME;
     var wsframe: WSFRAME;
     var wsframes, wsframes2: WSFRAMES;
(* HTTP *)
     colset HEADER = product STRING*STRING;
     colset HEADERS = list HEADER;
     fun getHeader (_, []) = ""
     | getHeader (key, (k,v)::hs) = 
         if key=k
         then v
         else getHeader (key, hs);
     (* HTTP request declarations *)
          colset HTTP_VERB = union
          GET + POST + PUT + DELETE +
          HEAD;
          colset REQUEST_LINE = record
          Verb: HTTP_VERB *
          Path: STRING *
          Version: STRING;
          colset HTTPREQ = record
          RequestLine: REQUEST_LINE *
          Headers: HEADERS;
          var httpreq: HTTPREQ;
          fun httpReqFromUrl (url:URL) = 
          {
            RequestLine={
              Verb=GET, 
              Path=(#Path url),
              Version=httpVersion
            },
            Headers=[
              ("Host", (#Host url)),
              ("Upgrade", "websocket"),
              ("Connection", "Upgrade"),
              ("Sec-WebSocket-Key", (B64 nonce)),
              ("Sec-WebSocket-Version", "13")
            ]
          };
     (* HTTP response declarations *)
          colset RESPONSE_LINE = record
          Version: STRING *
          Status: INT *
          Message: STRING;
          colset HTTPRES = record
          ResponseLine: RESPONSE_LINE *
          Headers: HEADERS;
          var httpres: HTTPRES;
          fun generateAccept str =
          B64(SHA1(str^uuid));
          fun isResponseValid (res:HTTPRES, req:HTTPREQ) = let
            val rline = #ResponseLine res
            val headers = #Headers res
            val accepttoken = generateAccept(
              getHeader("Sec-WebSocket-Key",
                (#Headers req)))
          in
            #Status rline = 101 andalso
            getHeader("Upgrade", headers) 
              = "websocket" andalso
            getHeader("Connection", headers) 
              = "Upgrade" andalso
            getHeader("Sec-WebSocket-Accept",headers)
              = accepttoken
          end
fun opHex2Sym(hex) = case hex of
  0x1 => TEXT
| 0x2 => BINARY
| 0x8 => CLOSE
| 0x9 => PING
| 0xA => PONG;
fun opSym2Hex(sym) = case sym of
  TEXT => opText
| BINARY => opBinary
| CLOSE=> opConnectionClose
| PING => opPing
| PONG => opPong;
(* More functions *)
     fun mask (ws:WSFRAME) = let
       val ws1 = WSFRAME.set_Masked ws set
       val ws2 = WSFRAME.set_Masking_key ws1 (randMask())
     in 
       ws2
     end;
     fun unmask (ws:WSFRAME) = let
       val ws1 = WSFRAME.set_Masked ws clear
       val ws2 = WSFRAME.set_Masking_key ws1 Nomask
     in 
       ws2
     end;
     fun wrap (opc,payload,fin) = {
       Fin=fin,
       Rsv1=clear,
       Rsv2=clear,
       Rsv3=clear,
       Opcode=opc,
       Masked=clear,
       Payload_length=(String.size payload),
       Masking_key= Nomask,
       Payload=payload
     }
     fun wrapmsg (msg:MESSAGE,fin) = 
       wrap(opSym2Hex(#Op msg), 
         (#Message msg), fin);
     fun fragment (msg:MESSAGE) = let
       fun loop (opc, s, acc) = 
         if (String.size s) > fragSize
         then loop(
           opContinuation,
           String.extract(s,fragSize,NONE),
           acc^^[wrap(opc, 
             String.substring(s,0,fragSize), 
             clear
           )]
         )
         else 
           acc^^[wrap(opc, s, set)];
       in 
         loop(
           opSym2Hex(#Op msg), 
           (#Message msg), 
           [])
       end;
     fun append (msg:MESSAGE, s) = 
       {Op = #Op msg,
       Message = (#Message msg)^s}
     fun equal s1 s2 =
     s1 = s2;
(* Packets *)
     colset PACKET = union 
     HttpReq:HTTPREQ + 
     HttpRes:HTTPRES +
     WsFrame:WSFRAME;
     colset PACKETLIST = list PACKET;
     var p: PACKET;
     var ps, ps1, ps2: PACKETLIST;
